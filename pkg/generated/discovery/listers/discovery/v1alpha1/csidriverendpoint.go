/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ihcsim/cbt-aggapi/pkg/apis/discovery/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CSIDriverEndpointLister helps list CSIDriverEndpoints.
// All objects returned here must be treated as read-only.
type CSIDriverEndpointLister interface {
	// List lists all CSIDriverEndpoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CSIDriverEndpoint, err error)
	// CSIDriverEndpoints returns an object that can list and get CSIDriverEndpoints.
	CSIDriverEndpoints(namespace string) CSIDriverEndpointNamespaceLister
	CSIDriverEndpointListerExpansion
}

// cSIDriverEndpointLister implements the CSIDriverEndpointLister interface.
type cSIDriverEndpointLister struct {
	indexer cache.Indexer
}

// NewCSIDriverEndpointLister returns a new CSIDriverEndpointLister.
func NewCSIDriverEndpointLister(indexer cache.Indexer) CSIDriverEndpointLister {
	return &cSIDriverEndpointLister{indexer: indexer}
}

// List lists all CSIDriverEndpoints in the indexer.
func (s *cSIDriverEndpointLister) List(selector labels.Selector) (ret []*v1alpha1.CSIDriverEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CSIDriverEndpoint))
	})
	return ret, err
}

// CSIDriverEndpoints returns an object that can list and get CSIDriverEndpoints.
func (s *cSIDriverEndpointLister) CSIDriverEndpoints(namespace string) CSIDriverEndpointNamespaceLister {
	return cSIDriverEndpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CSIDriverEndpointNamespaceLister helps list and get CSIDriverEndpoints.
// All objects returned here must be treated as read-only.
type CSIDriverEndpointNamespaceLister interface {
	// List lists all CSIDriverEndpoints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CSIDriverEndpoint, err error)
	// Get retrieves the CSIDriverEndpoint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CSIDriverEndpoint, error)
	CSIDriverEndpointNamespaceListerExpansion
}

// cSIDriverEndpointNamespaceLister implements the CSIDriverEndpointNamespaceLister
// interface.
type cSIDriverEndpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CSIDriverEndpoints in the indexer for a given namespace.
func (s cSIDriverEndpointNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CSIDriverEndpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CSIDriverEndpoint))
	})
	return ret, err
}

// Get retrieves the CSIDriverEndpoint from the indexer for a given namespace and name.
func (s cSIDriverEndpointNamespaceLister) Get(name string) (*v1alpha1.CSIDriverEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("csidriverendpoint"), name)
	}
	return obj.(*v1alpha1.CSIDriverEndpoint), nil
}

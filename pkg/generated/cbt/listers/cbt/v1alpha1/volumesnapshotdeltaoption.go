/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ihcsim/cbt-aggapi/pkg/apis/cbt/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VolumeSnapshotDeltaOptionLister helps list VolumeSnapshotDeltaOptions.
// All objects returned here must be treated as read-only.
type VolumeSnapshotDeltaOptionLister interface {
	// List lists all VolumeSnapshotDeltaOptions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VolumeSnapshotDeltaOption, err error)
	// VolumeSnapshotDeltaOptions returns an object that can list and get VolumeSnapshotDeltaOptions.
	VolumeSnapshotDeltaOptions(namespace string) VolumeSnapshotDeltaOptionNamespaceLister
	VolumeSnapshotDeltaOptionListerExpansion
}

// volumeSnapshotDeltaOptionLister implements the VolumeSnapshotDeltaOptionLister interface.
type volumeSnapshotDeltaOptionLister struct {
	indexer cache.Indexer
}

// NewVolumeSnapshotDeltaOptionLister returns a new VolumeSnapshotDeltaOptionLister.
func NewVolumeSnapshotDeltaOptionLister(indexer cache.Indexer) VolumeSnapshotDeltaOptionLister {
	return &volumeSnapshotDeltaOptionLister{indexer: indexer}
}

// List lists all VolumeSnapshotDeltaOptions in the indexer.
func (s *volumeSnapshotDeltaOptionLister) List(selector labels.Selector) (ret []*v1alpha1.VolumeSnapshotDeltaOption, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VolumeSnapshotDeltaOption))
	})
	return ret, err
}

// VolumeSnapshotDeltaOptions returns an object that can list and get VolumeSnapshotDeltaOptions.
func (s *volumeSnapshotDeltaOptionLister) VolumeSnapshotDeltaOptions(namespace string) VolumeSnapshotDeltaOptionNamespaceLister {
	return volumeSnapshotDeltaOptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VolumeSnapshotDeltaOptionNamespaceLister helps list and get VolumeSnapshotDeltaOptions.
// All objects returned here must be treated as read-only.
type VolumeSnapshotDeltaOptionNamespaceLister interface {
	// List lists all VolumeSnapshotDeltaOptions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VolumeSnapshotDeltaOption, err error)
	// Get retrieves the VolumeSnapshotDeltaOption from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VolumeSnapshotDeltaOption, error)
	VolumeSnapshotDeltaOptionNamespaceListerExpansion
}

// volumeSnapshotDeltaOptionNamespaceLister implements the VolumeSnapshotDeltaOptionNamespaceLister
// interface.
type volumeSnapshotDeltaOptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VolumeSnapshotDeltaOptions in the indexer for a given namespace.
func (s volumeSnapshotDeltaOptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VolumeSnapshotDeltaOption, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VolumeSnapshotDeltaOption))
	})
	return ret, err
}

// Get retrieves the VolumeSnapshotDeltaOption from the indexer for a given namespace and name.
func (s volumeSnapshotDeltaOptionNamespaceLister) Get(name string) (*v1alpha1.VolumeSnapshotDeltaOption, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("volumesnapshotdeltaoption"), name)
	}
	return obj.(*v1alpha1.VolumeSnapshotDeltaOption), nil
}
